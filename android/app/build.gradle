plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}
def bootstrapVersion = "bootstrap-2024.12.08-r1+apt-android-7"
def bootstrapHashes = parseHashes("""
7a8a73795d6141891c14d0086275bcda47406e2178be72f9315f37ceef322736  bootstrap-aarch64.zip
1ac47bf74a9ac852c250d9467bd87178dbc4894880b38eae8f473d52e02e5b5b  bootstrap-arm.zip
39ba9617456baa2acd5c7af09060a754c45896347863fa1e0793debb36118adb  bootstrap-i686.zip
4f4a7c6e4a4e0a96984484d64bd7c61945a19e2c7773012133d8017eb5801c30  bootstrap-x86_64.zip
""")

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.example.flutter_ide_android"
    compileSdk = project.properties.compileSdkVersion.toInteger()
    ndkVersion = project.properties.ndkVersion//24//flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.termux"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = project.properties.minSdkVersion.toInteger()
        targetSdk = project.properties.targetSdkVersion.toInteger()
        minSdk = 31
        targetSdk = project.properties.targetSdkVersion.toInteger()
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        externalNativeBuild {
            ndkBuild {
                cFlags "-Wall", "-Wextra", "-Werror", "-Os", "-fno-stack-protector", "-Wl,--gc-sections"
            }
        }
         ndk {
            if (System.env['GPLAY_BUILD'] != '1' && System.env['CI_BUILD'] != '1') {
                abiFilters 'arm64-v8a'
            } else if (System.env['USE_SPLITBUILD'] != '1') {
                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            }
        }
        buildConfigField "String", "BOOTSTRAP_VERSION", "\"${bootstrapVersion}\""
     
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
     externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }
    lint {
        lintConfig file('../lint.xml')
    }
    buildFeatures {
        viewBinding true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}
configurations.all {
    exclude group: 'com.google.guava', module: 'listenablefuture'
}
flutter {
    source = "../.."
}
dependencies {
      implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'org.apache.commons:commons-compress:1.20'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.0'
    implementation 'com.google.android.material:material:1.3.0'


    api project(':termux-shared')
    api project(':terminal-emulator')
    api project(':terminal-view')
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'

   // implementation 'me.jfenn:crasher:0.0.1'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}
clean {
    doLast {
        def tree = fileTree(new File(projectDir, 'src/main/cpp'))
        tree.include 'bootstrap-*.zip'
        tree.each { it.delete() }
    }
}

def downloadRemoteArchive(String arch, String localUrl, String remoteUrl, String expectedChecksum, String version) {
    def digest = java.security.MessageDigest.getInstance("SHA-256")

    def file = new File(projectDir, localUrl)
    if (file.exists()) {
        def buffer = new byte[8192]
        def input = new FileInputStream(file)
        while (true) {
            def readBytes = input.read(buffer)
            if (readBytes < 0) break
            digest.update(buffer, 0, readBytes)
        }
        def checksum = String.format("%1\$64s", new BigInteger(1, digest.digest()).toString(16)).replace(' ', '0')
        if (checksum == expectedChecksum) {
            return
        } else {
            logger.quiet("Deleting old local file with wrong hash: " + localUrl)
            file.delete()
        }
    }

    logger.quiet("Downloading " + remoteUrl + " ...")

    file.parentFile.mkdirs()
    def out = new BufferedOutputStream(new FileOutputStream(file))

    def connection = new URL(remoteUrl).openConnection()
    connection.setInstanceFollowRedirects(true)
    def digestStream = new java.security.DigestInputStream(connection.inputStream, digest)
    out << digestStream
    out.close()

    def checksum = new BigInteger(1, digest.digest()).toString(16)
    if (checksum != expectedChecksum.replaceAll("^0+", "")) {
        file.delete()
        throw new Exception("Wrong checksum for " + remoteUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
    }
}

def downloadBootstrap(String arch, String expectedChecksum, String version) {
    downloadRemoteArchive(
            arch,
            "src/main/cpp/bootstrap-" + arch + ".zip",
            "https://github.com/termux/termux-packages/releases/download/" + version + "/bootstrap-" + arch + ".zip",
            expectedChecksum,
            version
    )
}



def parseHashes(String hashesStr) {
    Map<String, String> m = [:]
    for (String line in hashesStr.trim().split("\n")) {
        String[] parts = line.trim().split(" +")
        m[parts[1].trim()] = parts[0].trim()
    }
    return m
}

task downloadBootstraps() {
    doLast {
        downloadBootstrap("aarch64", bootstrapHashes["bootstrap-aarch64.zip"], bootstrapVersion)
        downloadBootstrap("arm", bootstrapHashes["bootstrap-arm.zip"], bootstrapVersion)
        downloadBootstrap("i686", bootstrapHashes["bootstrap-i686.zip"], bootstrapVersion)
        downloadBootstrap("x86_64", bootstrapHashes["bootstrap-x86_64.zip"], bootstrapVersion)  
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompileProvider.get().dependsOn(downloadBootstraps)
    }
}
